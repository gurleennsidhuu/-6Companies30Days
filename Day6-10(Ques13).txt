class Solution {
    public class Pair{
        int i;
        int j;
        Pair(int i, int j){
            this.i=i;
            this.j=j;
        }
    }
    public int orangesRotting(int[][] grid) {
        int fresh=0;
        Queue<Pair> q=new LinkedList<>();
        int dx[]={0,0,-1,1};
        int dy[]={-1,1,0,0};
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2) q.add(new Pair(i,j));
                else if(grid[i][j]==1) fresh++;
            }
        }
        if(fresh==0) return 0;
        int minutes=-1;
        while(!q.isEmpty()){
            int size=q.size();
            minutes++;
            while(size-->0){
                Pair temp=q.remove();
                for(int j=0;j<4;j++){
                    int newx=temp.i+dx[j];
                    int newy=temp.j+dy[j];
                    if(newx<0 || newy<0 || newx>=grid.length || newy>=grid[0].length || grid[newx][newy]==0 || grid[newx][newy]==2) continue;
                    grid[newx][newy]=2;
                    fresh--;
                    q.add(new Pair(newx,newy));
                }
            }
        }
        if(fresh>0) return -1;
        return minutes;
    }
}